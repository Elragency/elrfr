---
import "@fontsource-variable/inter";
import Compatibility from "~/components/compatibility.astro";
import Features from "~/components/features.astro";
import Footer from "~/components/footer.astro";
import Header from "~/components/header.astro";
import Intro from "~/components/intro.astro";
import Services from "~/components/services.astro";
// import Cards from "~/components/Cards.astro";
import Showcase from "~/components/showcase.astro";
import Splash from "~/components/splash.astro";
import Contact from "~/components/contact.astro";
import Test from "~/components/test.astro";
import Form from "~/components/form.astro";
import "~/styles/index.css";


const { generator, site } = Astro;
const image = new URL("social.jpg", site);
const description =
  "Build fast websites, faster. Astro is a new kind of site builder for the modern web. Lightning-fast performance meets powerful developer experience.";
---

<!DOCTYPE html>
<html lang="fr" class="h-full motion-safe:scroll-smooth" data-theme="dark">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
    <meta name="generator" content={generator} />
    <link rel="stylesheet" href="https://cdn.rawgit.com/michalsnik/aos/2.1.1/dist/aos.css" />
    <script src="https://cdn.rawgit.com/michalsnik/aos/2.1.1/dist/aos.js"></script>
    <link rel="stylesheet" href="https://unicons.iconscout.com/release/v2.1.9/css/unicons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.0/css/bootstrap.min.css">


 


    <title>Agence ELR - Les sp√©cialiste des PME</title>
    <meta name="description" content={description} />

    <!-- social media -->
    <meta property="og:title" content="Astro" />
    <meta property="og:type" content="website" />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />
    <meta property="og:url" content={site} />
    <meta name="twitter:card" content="summary_large_image" />

    <!-- initialize theme -->
    <script is:inline>
      const themeSaved = localStorage.getItem("theme");

      if (themeSaved) {
        document.documentElement.dataset.theme = themeSaved;
      } else {
        const prefersDark = window.matchMedia(
          "(prefers-color-scheme: dark)"
        ).matches;
        document.documentElement.dataset.theme = prefersDark ? "dark" : "light";
      }

      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", (event) => {
          if (!localStorage.getItem("theme")) {
            document.documentElement.dataset.theme = event.matches
              ? "dark"
              : "light";
          }
        });
    </script>
    <script>
      import invariant from "tiny-invariant";
    
      const COUNT = 70;
      const SPEED = 0.09;
      const DURATION = 15000; // 5 seconds
    
      class Star {
        x: number;
        y: number;
        z: number;
        xPrev: number;
        yPrev: number;
    
        constructor(x = 0, y = 0, z = 0) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.xPrev = x;
          this.yPrev = y;
        }
    
        update(width: number, height: number, speed: number) {
          this.xPrev = this.x;
          this.yPrev = this.y;
          this.z += speed * 0.0675;
          this.x += this.x * (speed * 0.0225) * this.z;
          this.y += this.y * (speed * 0.0225) * this.z;
          if (
            this.x > width / 2 ||
            this.x < -width / 2 ||
            this.y > height / 2 ||
            this.y < -height / 2
          ) {
            this.x = Math.random() * width - width / 2;
            this.y = Math.random() * height - height / 2;
            this.xPrev = this.x;
            this.yPrev = this.y;
            this.z = 0;
          }
        }
    
        draw(ctx: CanvasRenderingContext2D) {
          ctx.lineWidth = this.z;
          ctx.beginPath();
          ctx.moveTo(this.x, this.y);
          ctx.lineTo(this.xPrev, this.yPrev);
          ctx.stroke();
        }
      }
    
      const stars = Array.from({ length: COUNT }, () => new Star(0, 0, 0));
      let rafId = 0;
    
      const canvas = document.querySelector(
        "#starfield-canvas"
      ) as HTMLCanvasElement;
      invariant(canvas, "canvas should not be null");
      const ctx = canvas.getContext("2d");
    
      const container = document.querySelector("#starfield") as HTMLElement;
      invariant(container, "container should not be null");
      const resizeObserver = new ResizeObserver(setup);
      resizeObserver.observe(container);
    
      function setup() {
        invariant(ctx, "canvas context should not be null");
        rafId > 0 && cancelAnimationFrame(rafId);
    
        const { clientWidth: width, clientHeight: height } = container;
        const dpr = window.devicePixelRatio || 1;
        canvas.width = width * dpr;
        canvas.height = height * dpr;
        canvas.style.width = `${width}px`;
        canvas.style.height = `${height}px`;
        ctx.scale(dpr, dpr);
    
        for (const star of stars) {
          star.x = Math.random() * width - width / 2;
          star.y = Math.random() * height - height / 2;
          star.z = 0;
        }
    
        ctx.translate(width / 2, height / 2);
        ctx.fillStyle = "rgba(0, 0, 0, 0.0";
        ctx.strokeStyle = "white";
        rafId = requestAnimationFrame(frame);
      }
    
      function frame() {
        invariant(ctx, "canvas context should not be null");
        const { clientWidth: width, clientHeight: height } = container;
    
        for (const star of stars) {
          star.update(width, height, SPEED);
          star.draw(ctx);
        }
    
        ctx.fillRect(-width / 2, -height / 2, width, height);
        rafId = requestAnimationFrame(frame);
      }
        // Stop the animation after DURATION time
        setTimeout(() => {
        cancelAnimationFrame(rafId);
      }, DURATION);
    
    </script>
  </head>
  <body
    class="h-full overflow-x-hidden bg-default text-default text-base selection:bg-secondary selection:text-white"
  >
    <Header />
    <Splash />
    <section class="relative h-full">
      <div class="space-y-24 px-8 py-32">
        <Intro />
      </div>
      </section>
      <br><br><br><br><br><br><br>
          <!-- <Services/> -->
          <!-- <Cards/> -->
        <section>
      <Features />
        </section>
      <br>
      <Compatibility />
      <Showcase />
      
    </div>
    <Contact />
    <!-- <Test /> -->
    <!-- <Footer /> -->
    <!-- <Form /> -->
    <!-- <script>
      AOS.init();
    </script>
   <script type="module" src="/script.js"></script> -->
  </body>
  </html>


